{"version":3,"sources":["webpack:///./src/app/admin/combos/combos-routing.module.ts","webpack:///./src/app/admin/combos/combos.component.html","webpack:///./src/app/admin/combos/combos.component.scss","webpack:///./src/app/admin/combos/combos.component.ts","webpack:///./src/app/admin/combos/combos.module.ts","webpack:///./src/app/admin/combos/combos.service.ts","webpack:///./src/app/admin/combos/create/create.component.html","webpack:///./src/app/admin/combos/create/create.component.scss","webpack:///./src/app/admin/combos/create/create.component.ts","webpack:///./src/app/admin/combos/delete/delete.component.html","webpack:///./src/app/admin/combos/delete/delete.component.scss","webpack:///./src/app/admin/combos/delete/delete.component.ts","webpack:///./src/app/admin/combos/list/list.component.html","webpack:///./src/app/admin/combos/list/list.component.scss","webpack:///./src/app/admin/combos/list/list.component.ts","webpack:///./src/app/admin/combos/update/update.component.html","webpack:///./src/app/admin/combos/update/update.component.scss","webpack:///./src/app/admin/combos/update/update.component.ts","webpack:///./src/app/shared/classes/combo.ts"],"names":[],"mappings":"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","file":"combos-combos-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DeleteComponent } from './delete/delete.component';\nimport { UpdateComponent } from './update/update.component';\nimport { CreateComponent } from './create/create.component';\nimport { CombosComponent } from './combos.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: CombosComponent, children: [\n      { path: 'add', component: CreateComponent },\n      { path: 'update', component: UpdateComponent },\n      { path: 'update/:_id', component: UpdateComponent },\n      { path: 'delete', component: DeleteComponent },\n      { path: 'delete/:_id', component: DeleteComponent },\n    ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CombosRoutingModule { }\n","module.exports = \"<router-outlet></router-outlet>\\n<mat-card>\\n  <mat-card-header>\\n    <mat-card-title>\\n      <h2>Combos</h2>\\n    </mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <app-list></app-list>\\n  </mat-card-content>\\n</mat-card>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-combos',\n  templateUrl: './combos.component.html',\n  styleUrls: ['./combos.component.scss']\n})\nexport class CombosComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from './../../shared/shared.module';\nimport { CombosRoutingModule } from './combos-routing.module';\nimport { CombosComponent } from './combos.component';\nimport { CreateComponent } from './create/create.component';\nimport { UpdateComponent } from './update/update.component';\nimport { ListComponent } from './list/list.component';\nimport { DeleteComponent } from './delete/delete.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    CombosRoutingModule\n  ],\n  declarations: [CombosComponent, CreateComponent, UpdateComponent, ListComponent, DeleteComponent]\n})\nexport class CombosModule { }\n","import { Injectable } from '@angular/core';\nimport { DAO } from '../../shared/classes/dao';\nimport { Combo } from '../../shared/classes/combo';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CombosService extends DAO<Combo> {\n  constructor(httpClient: HttpClient) {\n    super(httpClient, \"combos\", \"combo\", \"Combos\");\n  }\n}\n","module.exports = \"<form #f='ngForm' (ngSubmit)='onSubmit(f)'>\\r\\n  <mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        <h2>Add combo</h2>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <div class='add-products row'>\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <h3>Add products</h3>\\r\\n        </div>\\r\\n        <ng-container *ngIf='allCategories'>\\r\\n          <div class=\\\"col-12\\\">\\r\\n            <!-- Categories input -->\\r\\n            <mat-form-field>\\r\\n              <input type=\\\"text\\\" placeholder=\\\"Categories\\\" matInput [formControl]=\\\"categoryCtrl\\\" [matAutocomplete]=\\\"categoryAuto\\\">\\r\\n              <mat-autocomplete #categoryAuto=\\\"matAutocomplete\\\" [displayWith]=\\\"displayCategoryFn\\\" (optionSelected)='filterProductsByCategory($event.option.value.name)'>\\r\\n                <mat-option *ngFor=\\\"let category of filteredCategories | async\\\" [value]=\\\"category\\\">\\r\\n                  {{ category.name }}\\r\\n                </mat-option>\\r\\n              </mat-autocomplete>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n        </ng-container>\\r\\n        <ng-container *ngIf='allProducts  && allProductsByCategory'>\\r\\n          <div class=\\\"col-12\\\">\\r\\n            <!-- product input -->\\r\\n            <mat-form-field>\\r\\n              <input type=\\\"text\\\" placeholder=\\\"Products\\\" matInput [formControl]=\\\"productCtrl\\\" [matAutocomplete]=\\\"auto\\\" required>\\r\\n              <mat-autocomplete #auto=\\\"matAutocomplete\\\" [displayWith]=\\\"displayProductFn\\\">\\r\\n                <mat-option *ngFor=\\\"let product of filteredProducts | async\\\" [value]=\\\"product\\\">\\r\\n                  {{product.name}}\\r\\n                </mat-option>\\r\\n              </mat-autocomplete>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div class=\\\"col-12\\\" *ngIf='productCtrl.value as previewProduct'>\\r\\n            <img [src]=\\\"previewProduct.imageURL\\\" alt=\\\"previewProduct.name\\\" class=\\\"img-fluid\\\">\\r\\n          </div>\\r\\n          <div class=\\\"col-12\\\">\\r\\n            <!-- add product button -->\\r\\n            <button type=\\\"button\\\" mat-button [disabled]='productCtrl.invalid' (click)='addProduct(productCtrl.value)'>Add product</button>\\r\\n          </div>\\r\\n        </ng-container>\\r\\n      </div>\\r\\n\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-button type='submit' [disabled]='f.invalid || f.submitted'>Submit</button>\\r\\n      <button mat-button type='button' routerLink='../' [disabled]='f.submitted'>Cancel</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n</form>\"","module.exports = \"\"","import { CategoriesService } from './../../categories/categories.service';\r\nimport { map, startWith, tap } from 'rxjs/operators';\r\nimport { ProductsService } from './../../products/products.service';\r\nimport { CombosService } from \"./../combos.service\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { NotificationsService } from \"./../../../notifications/notifications.service\";\r\nimport { Component } from \"@angular/core\";\r\nimport { Combo } from \"../../../shared/classes/combo\";\r\nimport { Create } from \"../../../shared/classes/create\";\r\nimport { Product } from \"../../../shared/classes/product\";\r\nimport { Category } from '../../../shared/classes/category';\r\nimport { FormControl } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\n@Component({\r\n  selector: \"app-create\",\r\n  templateUrl: \"./create.component.html\",\r\n  styleUrls: [\"./create.component.scss\", \"../../styles/crud.scss\"]\r\n})\r\nexport class CreateComponent extends Create<Combo> {\r\n  combo = new Combo();\r\n\r\n  allProducts: Product[];\r\n  allProductsByCategory: Product[];\r\n  filteredProducts: Observable<Product[]>;\r\n  productCtrl = new FormControl();\r\n\r\n  addedProducts: Product[] = [];\r\n\r\n  allCategories: Category[];\r\n  filteredCategories: Observable<Category[]>;\r\n  categoryCtrl = new FormControl({ name: \"All\" });\r\n\r\n  constructor(\r\n    public combosService: CombosService,\r\n    public router: Router,\r\n    public route: ActivatedRoute,\r\n    public notifications: NotificationsService,\r\n    private productsService: ProductsService,\r\n    private categoriesService: CategoriesService\r\n  ) {\r\n    super(combosService, notifications, router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.productsService\r\n      .all().pipe(\r\n        map(products => products.map(product => {\r\n          return {\r\n            name: product.name,\r\n            _id: product._id,\r\n            price: product.price,\r\n            category: product.category\r\n          } as Product;\r\n        })),\r\n        tap(products => {\r\n          console.log('Products : ', products);\r\n          this.allProducts = products;\r\n        })\r\n      )\r\n      .subscribe(() => this.filterProductsByCategory('all'));\r\n\r\n    this.filteredProducts = this.productCtrl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map((value: any) => value instanceof Object ? value.name : value),\r\n        map(value => this.filterProducts(value)),\r\n      // tap(products => console.log('Filtered :', products))\r\n    );\r\n\r\n    this.categoriesService\r\n      .all().pipe(\r\n        map(categories => categories.concat([{ name: \"All\" }])),\r\n        map(categories => categories.map(category => {\r\n          return {\r\n            name: category.name,\r\n            _id: category._id,\r\n          } as Category;\r\n        })),\r\n        tap(categories => console.log('Categories : ', categories))\r\n      )\r\n      .subscribe(categories => this.allCategories = categories);\r\n\r\n\r\n    this.filteredCategories = this.categoryCtrl.valueChanges\r\n      .pipe(\r\n        startWith(''),\r\n        map((value: any) => value instanceof Object ? value.name : value),\r\n        map(value => this.filterCategories(value)),\r\n      // tap(categories => console.log('Filtered :', categories))\r\n    );\r\n\r\n  }\r\n\r\n  private filterCategories(value: string): Category[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.allCategories.filter(category => category.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  displayCategoryFn(category: Category): string {\r\n    return category ? category.name : \"\";\r\n  }\r\n\r\n  private filterProducts(value: string): Product[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.allProductsByCategory.filter(product => product.name.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  filterProductsByCategory(category: string): void {\r\n    const filterValue = category.toLowerCase();\r\n    if (filterValue === \"all\") {\r\n      this.allProductsByCategory = this.allProducts.slice();\r\n    } else {\r\n      this.allProductsByCategory = this.allProducts.filter(product => product.category.name.toLowerCase() === filterValue);\r\n    }\r\n    this.productCtrl.setValue(\"\");\r\n  }\r\n\r\n  displayProductFn(product: Product): string {\r\n    return product ? product.name : \"\";\r\n  }\r\n\r\n  addProduct(product: Product): void {\r\n    this.addedProducts.push(product);\r\n  }\r\n}\r\n","module.exports = \"<mat-card>\\n  <mat-card-header>\\n    <mat-card-title>\\n      <h2>Delete {{service.className}}</h2>\\n    </mat-card-title>\\n  </mat-card-header>\\n  <mat-card-content>\\n    <ng-container *ngIf='object;else loading'>\\n      <p>Delete {{service.className}} {{ object?._id }}</p>\\n    </ng-container>\\n    <ng-template #loading>\\n      <mat-spinner class=\\\"col-12 mx-auto\\\"></mat-spinner>\\n    </ng-template>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <button mat-button type='button' (click)='onSubmit()'>Yes</button>\\n    <button mat-button type='button' routerLink='../../'>No</button>\\n  </mat-card-actions>\\n</mat-card>\"","module.exports = \"\"","import { CombosService } from \"./../combos.service\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { Component } from \"@angular/core\";\r\nimport { NotificationsService } from \"../../../notifications/notifications.service\";\r\nimport { Delete } from \"../../../shared/classes/delete\";\r\nimport { Combo } from \"../../../shared/classes/combo\";\r\n\r\n@Component({\r\n  selector: \"app-delete\",\r\n  templateUrl: \"./delete.component.html\",\r\n  styleUrls: [\"./delete.component.scss\", \"../../styles/crud.scss\"]\r\n})\r\nexport class DeleteComponent extends Delete<Combo> {\r\n  constructor(\r\n    public service: CombosService,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super(service, notifications, router, route);\r\n  }\r\n}\r\n","module.exports = \"<button mat-button type='button' routerLink='add'>Add combo</button>\\r\\n<div class=\\\"table-container\\\">\\r\\n  <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z0\\\">\\r\\n\\r\\n    <!-- ID Column -->\\r\\n    <!-- <ng-container matColumnDef=\\\"id\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> ID </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element._id}} </td>\\r\\n    </ng-container> -->\\r\\n\\r\\n    <!-- Products Column -->\\r\\n    <ng-container matColumnDef=\\\"products\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Products </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.products}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Actions Column -->\\r\\n    <ng-container matColumnDef=\\\"actions\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Actions </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n        <button mat-button type='button' (click)='onAction(\\\"update\\\",element)'>Update</button>\\r\\n        <button mat-button type='button' (click)='onAction(\\\"delete\\\",element)'>Delete</button>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n  <ng-container *ngIf='loading'>\\r\\n    <mat-spinner class=\\\"mx-auto my-3\\\"></mat-spinner>\\r\\n  </ng-container>\\r\\n</div>\\r\\n<mat-paginator [length]='dataSource?.data?.length' [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\"","module.exports = \"\"","import { Component } from \"@angular/core\";\r\nimport { CombosService } from \"../combos.service\";\r\nimport { Combo } from \"../../../shared/classes/combo\";\r\nimport { Router } from \"@angular/router\";\r\nimport { List } from \"../../../shared/classes/list\";\r\n\r\n@Component({\r\n  selector: \"app-list\",\r\n  templateUrl: \"./list.component.html\",\r\n  styleUrls: [\"./list.component.scss\", \"../../styles/crud.scss\", \"../../styles/list.scss\"]\r\n})\r\n\r\nexport class ListComponent extends List<Combo> {\r\n  constructor(\r\n    public service: CombosService,\r\n    public router: Router,\r\n  ) {\r\n    super(\r\n      service,\r\n      router,\r\n      [\"products\", \"actions\"]\r\n    );\r\n  }\r\n}\r\n","module.exports = \"<form #f='ngForm' (ngSubmit)='onSubmit(f)'>\\r\\n  <mat-card>\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        <h2>Edit combo</h2>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <ng-container *ngIf='object as combo'>\\r\\n        <!-- <mat-form-field>\\r\\n          <input matInput type=\\\"text\\\" placeholder='Name' [ngModel]='combo.name' name='name' required [readonly]='f.submitted'>\\r\\n        </mat-form-field>\\r\\n        <mat-form-field>\\r\\n          <input matInput type=\\\"text\\\" placeholder='Description' [ngModel]='combo.description' name='description' required [readonly]='f.submitted'>\\r\\n        </mat-form-field> -->\\r\\n      </ng-container>\\r\\n    </mat-card-content>\\r\\n    <mat-card-actions>\\r\\n      <button mat-button type='submit' [disabled]='f.invalid || f.submitted'>Submit</button>\\r\\n      <button mat-button type='button' routerLink='../../' [disabled]='f.submitted'>Cancel</button>\\r\\n    </mat-card-actions>\\r\\n  </mat-card>\\r\\n</form>\"","module.exports = \"\"","import { Component } from \"@angular/core\";\r\nimport { Combo } from \"../../../shared/classes/combo\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { CombosService } from \"../combos.service\";\r\nimport { NotificationsService } from \"./../../../notifications/notifications.service\";\r\nimport { Update } from \"../../../shared/classes/update\";\r\n\r\n@Component({\r\n  selector: \"app-update\",\r\n  templateUrl: \"./update.component.html\",\r\n  styleUrls: [\"./update.component.scss\", \"../../styles/crud.scss\"]\r\n})\r\nexport class UpdateComponent extends Update<Combo> {\r\n  constructor(\r\n    public service: CombosService,\r\n    public notifications: NotificationsService,\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super(service, notifications, router, route);\r\n  }\r\n}\r\n","import { Product } from \"./product\";\n\nexport class Combo {\n  constructor(\n    public products?: Product[]\n  ) { }\n}\n"],"sourceRoot":""}